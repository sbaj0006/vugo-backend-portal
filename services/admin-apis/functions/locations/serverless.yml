service:
  name: ${file(../../../../package.json ):name}-admin-api-locations

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-aws-documentation
  - serverless-plugin-resource-tagging
  - serverless-dotenv-plugin
provider:
  name: aws
  stackTags:
    'Vugo Environment': 'Vugo'
  apiVersion: ${file(../../../../deploymentConfig/config.${self:provider.stage}.yml):apiVersion}
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # Stage env for backend development, dev env for app users testing, production for released version
  region: ${file(../../../../deploymentConfig/config.${self:provider.stage}.yml):region}
  role: ${self:custom.iamRole}
  environment:
    STAGE: ${self:provider.stage}
    S3_BUCKET_NAME:  ${file(../../../../deploymentConfig/config.${self:provider.stage}.yml):assetBucketName}
  deploymentBucket:
    name: ${file(../../../../deploymentConfig/config.${self:provider.stage}.yml):srcBucketName}
  apiGateway: ${file(../../../../deploymentConfig/config.${self:provider.stage}.yml):adminApiGateway}
  tags:
    apiVersion: ${self:provider.apiVersion}
  versionFunctions: false

functions:
  upsert-geofence:
    handler: location.upsertGeoFence
    events:
      - http:
          method: post
          path: ${self:custom.adminBaseUrl}/locations/geo-fencing
          cors: true
          documentation:
            summary: 'Create/Update GeoFence'
            description: 'Create/Update GepFence'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains GeoFence Details'
  get-geofence:
    handler: location.getGeoFences
    events:
      - http:
          method: get
          path: ${self:custom.adminBaseUrl}/locations/geo-fencing
          cors: true
          documentation:
            summary: 'Get the list of GeoFences'
            description: 'Get the list of GeoFences'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains The list of GeoFences'
  get-white-listed-ips:
    handler: location.getWhiteListedIps
    events:
      - http:
          method: get
          path: ${self:custom.adminBaseUrl}/locations/white-listed-ips
          cors: true
          documentation:
            summary: 'Get the list of white-listed-ips'
            description: 'Get the list of white-listed-ips'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains The list of white-listed-ips'
  toggle-geofence-status:
    handler: location.toggleGeoFenceStatus
    events:
      - http:
          method: post
          path: ${self:custom.adminBaseUrl}/locations/geo-fencing/{geoFenceId}/status
          cors: true
          documentation:
            summary: 'Update GeoFence Status'
            description: 'Update GeoFence Status'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains GeoFence Status'
  delete-geofence-by-Id:
    handler: location.deleteGeoFenceById
    events:
      - http:
          method: delete
          path: ${self:custom.adminBaseUrl}/locations/geo-fencing/{geoFenceId}
          cors: true
          documentation:
            summary: 'Delete GeoFence'
            description: 'Delete GeoFence'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains Deleted GeoFence'
  create-whitelisted-IP:
    handler: location.createWhiteListedIp
    events:
      - http:
          method: post
          path: ${self:custom.adminBaseUrl}/locations/white-listed-ips
          cors: true
          documentation:
            summary: 'Create Whitelisted Ips'
            description: 'Create Whitelisted Ips'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains Whitelisted IP Details'
  delete-whitelisted-IP:
    handler: location.deleteWhiteListedIPById
    events:
      - http:
          method: delete
          path: ${self:custom.adminBaseUrl}/locations/white-listed-ips/{ipId}
          cors: true
          documentation:
            summary: 'Delete Whitelisted Ips'
            description: 'Delete Whitelisted Ips'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains Deleted Whitelisted IP Details'
  update-whitelisted-IP:
    handler: location.updateWhiteListedIP
    events:
      - http:
          method: put
          path: ${self:custom.adminBaseUrl}/locations/white-listed-ips/{ipId}
          cors: true
          documentation:
            summary: 'Update Whitelisted Ips'
            description: 'Update Whitelisted Ips'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains Updated Whitelisted IP Details'
  toggle-ip-status:
    handler: location.toggleWhiteListedIPStatus
    events:
      - http:
          method: post
          path: ${self:custom.adminBaseUrl}/locations/white-listed-ips/{ipId}/status
          cors: true
          documentation:
            summary: 'Update IP Status'
            description: 'Update IP Status'
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: 'Response contains IP Status'
custom:
  iamRole: ${file(../../../../deploymentConfig/config.${self:provider.stage}.yml):adminIamRole}
  adminBaseUrl: ${file(../../../../deploymentConfig/config.${self:provider.stage}.yml):adminBaseUrl}
  serverless-offline:
    port: 4000
  dotenv:
    path: ../../../../.env 
    basePath: ./
    logging: false
